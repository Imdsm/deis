#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/deis/docs}
export ETCD_TTL=${ETCD_TTL:-10}

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null; do
    echo "waiting for etcd at $ETCD..."
    sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

cd /app

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $CELERY_PID $GUNICORN_PID
    wait $CELERY_PID $GUNICORN_PID 2>/dev/null
}
trap on_exit INT TERM

# serve the documentation in the background
nginx &

echo deis-docs running...

# publish the service to etcd using the injected PORT
if [[ ! -z $PUBLISH ]]; then

    # configure service discovery
    PORT=${PORT:-80}
    PROTO=${PROTO:-tcp}

    set +e

    # wait for the service to become available on PUBLISH port
    sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

    # while the port is listening, publish to etcd
    while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
        etcdctl --no-sync -C $ETCD set $ETCD_PATH/host $HOST --ttl $ETCD_TTL >/dev/null
        etcdctl --no-sync -C $ETCD set $ETCD_PATH/port $PORT --ttl $ETCD_TTL >/dev/null
        sleep $(($ETCD_TTL/2)) # sleep for half the TTL
    done

    # if the loop quits, something went wrong
    exit 1

fi

wait
